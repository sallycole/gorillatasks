 <Rule '/auth/login' (POST, GET, OPTIONS, HEAD) -> auth.login>,
 <Rule '/auth/register' (POST, GET, OPTIONS, HEAD) -> auth.register>,
 <Rule '/auth/logout' (GET, OPTIONS, HEAD) -> auth.logout>,
 <Rule '/auth/account' (POST, GET, OPTIONS, HEAD) -> auth.account>,
 <Rule '/auth/enrollment/<enrollment_id>/toggle_pause' (POST, OPTIONS) -> auth.toggle_pause>,
 <Rule '/auth/unenroll/<enrollment_id>' (POST, OPTIONS) -> auth.unenroll>,
 <Rule '/auth/enrollment/<enrollment_id>/edit' (POST, GET, OPTIONS, HEAD) -> auth.edit_enrollment>,
 <Rule '/curriculum/' (GET, OPTIONS, HEAD) -> curriculum.list>,
 <Rule '/curriculum/new' (POST, GET, OPTIONS, HEAD) -> curriculum.new>,
 <Rule '/curriculum/<id>' (GET, OPTIONS, HEAD) -> curriculum.view>,
 <Rule '/curriculum/<id>/publish' (POST, OPTIONS) -> curriculum.publish>,
 <Rule '/curriculum/<id>/delete' (POST, OPTIONS) -> curriculum.delete>,
 <Rule '/curriculum/<id>/edit' (POST, GET, OPTIONS, HEAD) -> curriculum.edit>,
 <Rule '/curriculum/<id>/tasks/add' (POST, OPTIONS) -> curriculum.add_task>,
 <Rule '/curriculum/<curriculum_id>/tasks/<task_id>/edit' (POST, OPTIONS) -> curriculum.edit_task>,
 <Rule '/curriculum/<curriculum_id>/tasks/<task_id>/delete' (POST, OPTIONS) -> curriculum.delete_task>,
 <Rule '/curriculum/<id>/enroll' (POST, GET, OPTIONS, HEAD) -> curriculum.enroll>,
 <Rule '/inventory/' (GET, OPTIONS, HEAD) -> inventory.index>,
 <Rule '/inventory/task/<id>/start' (POST, OPTIONS) -> inventory.start_task>,
 <Rule '/inventory/task/<id>/finish' (POST, OPTIONS) -> inventory.finish_task>,
 <Rule '/inventory/task/<id>/skip' (POST, OPTIONS) -> inventory.skip_task>,
 <Rule '/inventory/task/<id>/promote' (POST, OPTIONS) -> inventory.promote_task>,
 <Rule '/archive/' (GET, OPTIONS, HEAD) -> archive.index>,
 <Rule '/archive/enrollment/<id>' (GET, OPTIONS, HEAD) -> archive.view_enrollment>,
 <Rule '/archive/task/<id>/unarchive' (POST, OPTIONS) -> archive.unarchive_task>,
 <Rule '/today/' (GET, OPTIONS, HEAD) -> today.index>,
 <Rule '/today/reset' (POST, OPTIONS) -> today.reset_today>,
 <Rule '/today/task/<id>/start' (POST, OPTIONS) -> today.start_task>,
 <Rule '/today/task/<id>/finish' (POST, OPTIONS) -> today.finish_task>,
 <Rule '/test/test_doctype' (GET, OPTIONS, HEAD) -> test.test_doctype>,
 <Rule '/' (GET, OPTIONS, HEAD) -> root>])
/home/runner/workspace/migrate_encrypted_passwords.py:33: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  user = User.query.get(user_id)
2025-03-08 23:19:23,323 - __main__ - INFO - Migrating password for user 1 (phoebezcole@gmail.com)
2025-03-08 23:19:23,323 - __main__ - WARNING - Password for user 1 is too long (162 chars)
Traceback (most recent call last):
  File "/home/runner/workspace/migrate_encrypted_passwords.py", line 66, in <module>
    migrate_encrypted_passwords()
  File "/home/runner/workspace/migrate_encrypted_passwords.py", line 47, in migrate_encrypted_passwords
    user.password_hash = generate_password_hash(encrypted_password[:64], method='sha256')
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/werkzeug/security.py", line 108, in generate_password_hash
    h, actual_method = _hash_internal(method, salt, password)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/werkzeug/security.py", line 70, in _hash_internal
    raise ValueError(f"Invalid hash method '{method}'.")
ValueError: Invalid hash method 'sha256'.